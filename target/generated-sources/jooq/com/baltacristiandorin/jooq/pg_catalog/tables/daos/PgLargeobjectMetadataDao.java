/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgLargeobjectMetadata;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgLargeobjectMetadataRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgLargeobjectMetadataDao extends DAOImpl<PgLargeobjectMetadataRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata, Long> {

    /**
     * Create a new PgLargeobjectMetadataDao without any configuration
     */
    public PgLargeobjectMetadataDao() {
        super(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata.class);
    }

    /**
     * Create a new PgLargeobjectMetadataDao with an attached configuration
     */
    public PgLargeobjectMetadataDao(Configuration configuration) {
        super(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata object) {
        return object.getOid();
    }

    /**
     * Fetch records that have <code>oid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchRangeOfOid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.OID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>oid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchByOid(Long... values) {
        return fetch(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.OID, values);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata fetchOneByOid(Long value) {
        return fetchOne(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.OID, value);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchOptionalByOid(Long value) {
        return fetchOptional(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.OID, value);
    }

    /**
     * Fetch records that have <code>lomowner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchRangeOfLomowner(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.LOMOWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lomowner IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchByLomowner(Long... values) {
        return fetch(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.LOMOWNER, values);
    }

    /**
     * Fetch records that have <code>lomacl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchRangeOfLomacl(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.LOMACL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lomacl IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgLargeobjectMetadata> fetchByLomacl(String[]... values) {
        return fetch(PgLargeobjectMetadata.PG_LARGEOBJECT_METADATA.LOMACL, values);
    }
}
