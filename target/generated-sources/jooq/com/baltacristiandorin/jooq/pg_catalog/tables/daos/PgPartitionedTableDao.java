/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgPartitionedTable;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgPartitionedTableRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgPartitionedTableDao extends DAOImpl<PgPartitionedTableRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable, Long> {

    /**
     * Create a new PgPartitionedTableDao without any configuration
     */
    public PgPartitionedTableDao() {
        super(PgPartitionedTable.PG_PARTITIONED_TABLE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable.class);
    }

    /**
     * Create a new PgPartitionedTableDao with an attached configuration
     */
    public PgPartitionedTableDao(Configuration configuration) {
        super(PgPartitionedTable.PG_PARTITIONED_TABLE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable object) {
        return object.getPartrelid();
    }

    /**
     * Fetch records that have <code>partrelid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartrelid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTRELID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partrelid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartrelid(Long... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTRELID, values);
    }

    /**
     * Fetch a unique record that has <code>partrelid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable fetchOneByPartrelid(Long value) {
        return fetchOne(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTRELID, value);
    }

    /**
     * Fetch a unique record that has <code>partrelid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchOptionalByPartrelid(Long value) {
        return fetchOptional(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTRELID, value);
    }

    /**
     * Fetch records that have <code>partstrat BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartstrat(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTSTRAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partstrat IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartstrat(String... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTSTRAT, values);
    }

    /**
     * Fetch records that have <code>partnatts BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartnatts(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTNATTS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partnatts IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartnatts(Short... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTNATTS, values);
    }

    /**
     * Fetch records that have <code>partdefid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartdefid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTDEFID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partdefid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartdefid(Long... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTDEFID, values);
    }

    /**
     * Fetch records that have <code>partattrs BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartattrs(Object[] lowerInclusive, Object[] upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTATTRS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partattrs IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartattrs(Object[]... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTATTRS, values);
    }

    /**
     * Fetch records that have <code>partclass BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartclass(Object[] lowerInclusive, Object[] upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTCLASS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partclass IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartclass(Object[]... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTCLASS, values);
    }

    /**
     * Fetch records that have <code>partcollation BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartcollation(Object[] lowerInclusive, Object[] upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTCOLLATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>partcollation IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartcollation(Object[]... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTCOLLATION, values);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchRangeOfPartexprs(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTEXPRS, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgPartitionedTable> fetchByPartexprs(Object... values) {
        return fetch(PgPartitionedTable.PG_PARTITIONED_TABLE.PARTEXPRS, values);
    }
}
