/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgType;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgTypeRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgTypeDao extends DAOImpl<PgTypeRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType, Long> {

    /**
     * Create a new PgTypeDao without any configuration
     */
    public PgTypeDao() {
        super(PgType.PG_TYPE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType.class);
    }

    /**
     * Create a new PgTypeDao with an attached configuration
     */
    public PgTypeDao(Configuration configuration) {
        super(PgType.PG_TYPE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType object) {
        return object.getOid();
    }

    /**
     * Fetch records that have <code>oid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfOid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.OID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>oid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByOid(Long... values) {
        return fetch(PgType.PG_TYPE.OID, values);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType fetchOneByOid(Long value) {
        return fetchOne(PgType.PG_TYPE.OID, value);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchOptionalByOid(Long value) {
        return fetchOptional(PgType.PG_TYPE.OID, value);
    }

    /**
     * Fetch records that have <code>typname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypname(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typname IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypname(String... values) {
        return fetch(PgType.PG_TYPE.TYPNAME, values);
    }

    /**
     * Fetch records that have <code>typnamespace BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypnamespace(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPNAMESPACE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typnamespace IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypnamespace(Long... values) {
        return fetch(PgType.PG_TYPE.TYPNAMESPACE, values);
    }

    /**
     * Fetch records that have <code>typowner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypowner(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPOWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typowner IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypowner(Long... values) {
        return fetch(PgType.PG_TYPE.TYPOWNER, values);
    }

    /**
     * Fetch records that have <code>typlen BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTyplen(Short lowerInclusive, Short upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPLEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typlen IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTyplen(Short... values) {
        return fetch(PgType.PG_TYPE.TYPLEN, values);
    }

    /**
     * Fetch records that have <code>typbyval BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypbyval(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPBYVAL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typbyval IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypbyval(Boolean... values) {
        return fetch(PgType.PG_TYPE.TYPBYVAL, values);
    }

    /**
     * Fetch records that have <code>typtype BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTyptype(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typtype IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTyptype(String... values) {
        return fetch(PgType.PG_TYPE.TYPTYPE, values);
    }

    /**
     * Fetch records that have <code>typcategory BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypcategory(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPCATEGORY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typcategory IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypcategory(String... values) {
        return fetch(PgType.PG_TYPE.TYPCATEGORY, values);
    }

    /**
     * Fetch records that have <code>typispreferred BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypispreferred(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPISPREFERRED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typispreferred IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypispreferred(Boolean... values) {
        return fetch(PgType.PG_TYPE.TYPISPREFERRED, values);
    }

    /**
     * Fetch records that have <code>typisdefined BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypisdefined(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPISDEFINED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typisdefined IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypisdefined(Boolean... values) {
        return fetch(PgType.PG_TYPE.TYPISDEFINED, values);
    }

    /**
     * Fetch records that have <code>typdelim BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypdelim(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPDELIM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typdelim IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypdelim(String... values) {
        return fetch(PgType.PG_TYPE.TYPDELIM, values);
    }

    /**
     * Fetch records that have <code>typrelid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTyprelid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPRELID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typrelid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTyprelid(Long... values) {
        return fetch(PgType.PG_TYPE.TYPRELID, values);
    }

    /**
     * Fetch records that have <code>typsubscript BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypsubscript(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPSUBSCRIPT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typsubscript IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypsubscript(String... values) {
        return fetch(PgType.PG_TYPE.TYPSUBSCRIPT, values);
    }

    /**
     * Fetch records that have <code>typelem BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypelem(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPELEM, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typelem IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypelem(Long... values) {
        return fetch(PgType.PG_TYPE.TYPELEM, values);
    }

    /**
     * Fetch records that have <code>typarray BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTyparray(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPARRAY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typarray IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTyparray(Long... values) {
        return fetch(PgType.PG_TYPE.TYPARRAY, values);
    }

    /**
     * Fetch records that have <code>typinput BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypinput(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPINPUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typinput IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypinput(String... values) {
        return fetch(PgType.PG_TYPE.TYPINPUT, values);
    }

    /**
     * Fetch records that have <code>typoutput BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypoutput(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPOUTPUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typoutput IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypoutput(String... values) {
        return fetch(PgType.PG_TYPE.TYPOUTPUT, values);
    }

    /**
     * Fetch records that have <code>typreceive BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypreceive(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPRECEIVE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typreceive IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypreceive(String... values) {
        return fetch(PgType.PG_TYPE.TYPRECEIVE, values);
    }

    /**
     * Fetch records that have <code>typsend BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypsend(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPSEND, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typsend IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypsend(String... values) {
        return fetch(PgType.PG_TYPE.TYPSEND, values);
    }

    /**
     * Fetch records that have <code>typmodin BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypmodin(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPMODIN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typmodin IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypmodin(String... values) {
        return fetch(PgType.PG_TYPE.TYPMODIN, values);
    }

    /**
     * Fetch records that have <code>typmodout BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypmodout(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPMODOUT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typmodout IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypmodout(String... values) {
        return fetch(PgType.PG_TYPE.TYPMODOUT, values);
    }

    /**
     * Fetch records that have <code>typanalyze BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypanalyze(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPANALYZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typanalyze IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypanalyze(String... values) {
        return fetch(PgType.PG_TYPE.TYPANALYZE, values);
    }

    /**
     * Fetch records that have <code>typalign BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypalign(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPALIGN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typalign IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypalign(String... values) {
        return fetch(PgType.PG_TYPE.TYPALIGN, values);
    }

    /**
     * Fetch records that have <code>typstorage BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypstorage(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPSTORAGE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typstorage IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypstorage(String... values) {
        return fetch(PgType.PG_TYPE.TYPSTORAGE, values);
    }

    /**
     * Fetch records that have <code>typnotnull BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypnotnull(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPNOTNULL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typnotnull IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypnotnull(Boolean... values) {
        return fetch(PgType.PG_TYPE.TYPNOTNULL, values);
    }

    /**
     * Fetch records that have <code>typbasetype BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypbasetype(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPBASETYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typbasetype IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypbasetype(Long... values) {
        return fetch(PgType.PG_TYPE.TYPBASETYPE, values);
    }

    /**
     * Fetch records that have <code>typtypmod BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTyptypmod(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPTYPMOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typtypmod IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTyptypmod(Integer... values) {
        return fetch(PgType.PG_TYPE.TYPTYPMOD, values);
    }

    /**
     * Fetch records that have <code>typndims BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypndims(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPNDIMS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typndims IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypndims(Integer... values) {
        return fetch(PgType.PG_TYPE.TYPNDIMS, values);
    }

    /**
     * Fetch records that have <code>typcollation BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypcollation(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPCOLLATION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typcollation IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypcollation(Long... values) {
        return fetch(PgType.PG_TYPE.TYPCOLLATION, values);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypdefaultbin(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPDEFAULTBIN, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. If this is a qualified, user-defined type,
     * it may have been excluded from code generation. If this is a built-in
     * type, you can define an explicit {@link org.jooq.Binding} to specify how
     * this type should be handled. Deprecation can be turned off using
     * {@literal <deprecationOnUnknownTypes/>} in your code generator
     * configuration.
     */
    @Deprecated
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypdefaultbin(Object... values) {
        return fetch(PgType.PG_TYPE.TYPDEFAULTBIN, values);
    }

    /**
     * Fetch records that have <code>typdefault BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypdefault(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPDEFAULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typdefault IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypdefault(String... values) {
        return fetch(PgType.PG_TYPE.TYPDEFAULT, values);
    }

    /**
     * Fetch records that have <code>typacl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchRangeOfTypacl(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(PgType.PG_TYPE.TYPACL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>typacl IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgType> fetchByTypacl(String[]... values) {
        return fetch(PgType.PG_TYPE.TYPACL, values);
    }
}
