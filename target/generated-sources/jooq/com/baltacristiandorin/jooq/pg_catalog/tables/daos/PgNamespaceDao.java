/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgNamespace;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgNamespaceRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgNamespaceDao extends DAOImpl<PgNamespaceRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace, Long> {

    /**
     * Create a new PgNamespaceDao without any configuration
     */
    public PgNamespaceDao() {
        super(PgNamespace.PG_NAMESPACE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace.class);
    }

    /**
     * Create a new PgNamespaceDao with an attached configuration
     */
    public PgNamespaceDao(Configuration configuration) {
        super(PgNamespace.PG_NAMESPACE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace object) {
        return object.getOid();
    }

    /**
     * Fetch records that have <code>oid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchRangeOfOid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgNamespace.PG_NAMESPACE.OID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>oid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchByOid(Long... values) {
        return fetch(PgNamespace.PG_NAMESPACE.OID, values);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace fetchOneByOid(Long value) {
        return fetchOne(PgNamespace.PG_NAMESPACE.OID, value);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchOptionalByOid(Long value) {
        return fetchOptional(PgNamespace.PG_NAMESPACE.OID, value);
    }

    /**
     * Fetch records that have <code>nspname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchRangeOfNspname(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgNamespace.PG_NAMESPACE.NSPNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nspname IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchByNspname(String... values) {
        return fetch(PgNamespace.PG_NAMESPACE.NSPNAME, values);
    }

    /**
     * Fetch a unique record that has <code>nspname = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace fetchOneByNspname(String value) {
        return fetchOne(PgNamespace.PG_NAMESPACE.NSPNAME, value);
    }

    /**
     * Fetch a unique record that has <code>nspname = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchOptionalByNspname(String value) {
        return fetchOptional(PgNamespace.PG_NAMESPACE.NSPNAME, value);
    }

    /**
     * Fetch records that have <code>nspowner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchRangeOfNspowner(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgNamespace.PG_NAMESPACE.NSPOWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nspowner IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchByNspowner(Long... values) {
        return fetch(PgNamespace.PG_NAMESPACE.NSPOWNER, values);
    }

    /**
     * Fetch records that have <code>nspacl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchRangeOfNspacl(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(PgNamespace.PG_NAMESPACE.NSPACL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>nspacl IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgNamespace> fetchByNspacl(String[]... values) {
        return fetch(PgNamespace.PG_NAMESPACE.NSPACL, values);
    }
}
