/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.pojos;


import java.io.Serializable;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgGetBackendMemoryContexts implements Serializable {

    private static final long serialVersionUID = 1L;

    private String name;
    private String ident;
    private String parent;
    private Integer level;
    private Long totalBytes;
    private Long totalNblocks;
    private Long freeBytes;
    private Long freeChunks;
    private Long usedBytes;

    public PgGetBackendMemoryContexts() {}

    public PgGetBackendMemoryContexts(PgGetBackendMemoryContexts value) {
        this.name = value.name;
        this.ident = value.ident;
        this.parent = value.parent;
        this.level = value.level;
        this.totalBytes = value.totalBytes;
        this.totalNblocks = value.totalNblocks;
        this.freeBytes = value.freeBytes;
        this.freeChunks = value.freeChunks;
        this.usedBytes = value.usedBytes;
    }

    public PgGetBackendMemoryContexts(
        String name,
        String ident,
        String parent,
        Integer level,
        Long totalBytes,
        Long totalNblocks,
        Long freeBytes,
        Long freeChunks,
        Long usedBytes
    ) {
        this.name = name;
        this.ident = ident;
        this.parent = parent;
        this.level = level;
        this.totalBytes = totalBytes;
        this.totalNblocks = totalNblocks;
        this.freeBytes = freeBytes;
        this.freeChunks = freeChunks;
        this.usedBytes = usedBytes;
    }

    /**
     * Getter for <code>pg_catalog.pg_get_backend_memory_contexts.name</code>.
     */
    public String getName() {
        return this.name;
    }

    /**
     * Setter for <code>pg_catalog.pg_get_backend_memory_contexts.name</code>.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Getter for <code>pg_catalog.pg_get_backend_memory_contexts.ident</code>.
     */
    public String getIdent() {
        return this.ident;
    }

    /**
     * Setter for <code>pg_catalog.pg_get_backend_memory_contexts.ident</code>.
     */
    public void setIdent(String ident) {
        this.ident = ident;
    }

    /**
     * Getter for <code>pg_catalog.pg_get_backend_memory_contexts.parent</code>.
     */
    public String getParent() {
        return this.parent;
    }

    /**
     * Setter for <code>pg_catalog.pg_get_backend_memory_contexts.parent</code>.
     */
    public void setParent(String parent) {
        this.parent = parent;
    }

    /**
     * Getter for <code>pg_catalog.pg_get_backend_memory_contexts.level</code>.
     */
    public Integer getLevel() {
        return this.level;
    }

    /**
     * Setter for <code>pg_catalog.pg_get_backend_memory_contexts.level</code>.
     */
    public void setLevel(Integer level) {
        this.level = level;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_bytes</code>.
     */
    public Long getTotalBytes() {
        return this.totalBytes;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_bytes</code>.
     */
    public void setTotalBytes(Long totalBytes) {
        this.totalBytes = totalBytes;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_nblocks</code>.
     */
    public Long getTotalNblocks() {
        return this.totalNblocks;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.total_nblocks</code>.
     */
    public void setTotalNblocks(Long totalNblocks) {
        this.totalNblocks = totalNblocks;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_bytes</code>.
     */
    public Long getFreeBytes() {
        return this.freeBytes;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_bytes</code>.
     */
    public void setFreeBytes(Long freeBytes) {
        this.freeBytes = freeBytes;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_chunks</code>.
     */
    public Long getFreeChunks() {
        return this.freeChunks;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.free_chunks</code>.
     */
    public void setFreeChunks(Long freeChunks) {
        this.freeChunks = freeChunks;
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.used_bytes</code>.
     */
    public Long getUsedBytes() {
        return this.usedBytes;
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_get_backend_memory_contexts.used_bytes</code>.
     */
    public void setUsedBytes(Long usedBytes) {
        this.usedBytes = usedBytes;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final PgGetBackendMemoryContexts other = (PgGetBackendMemoryContexts) obj;
        if (this.name == null) {
            if (other.name != null)
                return false;
        }
        else if (!this.name.equals(other.name))
            return false;
        if (this.ident == null) {
            if (other.ident != null)
                return false;
        }
        else if (!this.ident.equals(other.ident))
            return false;
        if (this.parent == null) {
            if (other.parent != null)
                return false;
        }
        else if (!this.parent.equals(other.parent))
            return false;
        if (this.level == null) {
            if (other.level != null)
                return false;
        }
        else if (!this.level.equals(other.level))
            return false;
        if (this.totalBytes == null) {
            if (other.totalBytes != null)
                return false;
        }
        else if (!this.totalBytes.equals(other.totalBytes))
            return false;
        if (this.totalNblocks == null) {
            if (other.totalNblocks != null)
                return false;
        }
        else if (!this.totalNblocks.equals(other.totalNblocks))
            return false;
        if (this.freeBytes == null) {
            if (other.freeBytes != null)
                return false;
        }
        else if (!this.freeBytes.equals(other.freeBytes))
            return false;
        if (this.freeChunks == null) {
            if (other.freeChunks != null)
                return false;
        }
        else if (!this.freeChunks.equals(other.freeChunks))
            return false;
        if (this.usedBytes == null) {
            if (other.usedBytes != null)
                return false;
        }
        else if (!this.usedBytes.equals(other.usedBytes))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.name == null) ? 0 : this.name.hashCode());
        result = prime * result + ((this.ident == null) ? 0 : this.ident.hashCode());
        result = prime * result + ((this.parent == null) ? 0 : this.parent.hashCode());
        result = prime * result + ((this.level == null) ? 0 : this.level.hashCode());
        result = prime * result + ((this.totalBytes == null) ? 0 : this.totalBytes.hashCode());
        result = prime * result + ((this.totalNblocks == null) ? 0 : this.totalNblocks.hashCode());
        result = prime * result + ((this.freeBytes == null) ? 0 : this.freeBytes.hashCode());
        result = prime * result + ((this.freeChunks == null) ? 0 : this.freeChunks.hashCode());
        result = prime * result + ((this.usedBytes == null) ? 0 : this.usedBytes.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("PgGetBackendMemoryContexts (");

        sb.append(name);
        sb.append(", ").append(ident);
        sb.append(", ").append(parent);
        sb.append(", ").append(level);
        sb.append(", ").append(totalBytes);
        sb.append(", ").append(totalNblocks);
        sb.append(", ").append(freeBytes);
        sb.append(", ").append(freeChunks);
        sb.append(", ").append(usedBytes);

        sb.append(")");
        return sb.toString();
    }
}
