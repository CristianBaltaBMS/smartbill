/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgConversion;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgConversionRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgConversionDao extends DAOImpl<PgConversionRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion, Long> {

    /**
     * Create a new PgConversionDao without any configuration
     */
    public PgConversionDao() {
        super(PgConversion.PG_CONVERSION, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion.class);
    }

    /**
     * Create a new PgConversionDao with an attached configuration
     */
    public PgConversionDao(Configuration configuration) {
        super(PgConversion.PG_CONVERSION, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion object) {
        return object.getOid();
    }

    /**
     * Fetch records that have <code>oid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfOid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.OID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>oid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByOid(Long... values) {
        return fetch(PgConversion.PG_CONVERSION.OID, values);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion fetchOneByOid(Long value) {
        return fetchOne(PgConversion.PG_CONVERSION.OID, value);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchOptionalByOid(Long value) {
        return fetchOptional(PgConversion.PG_CONVERSION.OID, value);
    }

    /**
     * Fetch records that have <code>conname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfConname(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conname IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByConname(String... values) {
        return fetch(PgConversion.PG_CONVERSION.CONNAME, values);
    }

    /**
     * Fetch records that have <code>connamespace BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfConnamespace(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONNAMESPACE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>connamespace IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByConnamespace(Long... values) {
        return fetch(PgConversion.PG_CONVERSION.CONNAMESPACE, values);
    }

    /**
     * Fetch records that have <code>conowner BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfConowner(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONOWNER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conowner IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByConowner(Long... values) {
        return fetch(PgConversion.PG_CONVERSION.CONOWNER, values);
    }

    /**
     * Fetch records that have <code>conforencoding BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfConforencoding(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONFORENCODING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conforencoding IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByConforencoding(Integer... values) {
        return fetch(PgConversion.PG_CONVERSION.CONFORENCODING, values);
    }

    /**
     * Fetch records that have <code>contoencoding BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfContoencoding(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONTOENCODING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>contoencoding IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByContoencoding(Integer... values) {
        return fetch(PgConversion.PG_CONVERSION.CONTOENCODING, values);
    }

    /**
     * Fetch records that have <code>conproc BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfConproc(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONPROC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>conproc IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByConproc(String... values) {
        return fetch(PgConversion.PG_CONVERSION.CONPROC, values);
    }

    /**
     * Fetch records that have <code>condefault BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchRangeOfCondefault(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgConversion.PG_CONVERSION.CONDEFAULT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>condefault IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgConversion> fetchByCondefault(Boolean... values) {
        return fetch(PgConversion.PG_CONVERSION.CONDEFAULT, values);
    }
}
