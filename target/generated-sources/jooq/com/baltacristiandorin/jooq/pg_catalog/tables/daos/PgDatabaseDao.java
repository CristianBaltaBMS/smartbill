/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.pg_catalog.tables.daos;


import com.baltacristiandorin.jooq.pg_catalog.tables.PgDatabase;
import com.baltacristiandorin.jooq.pg_catalog.tables.records.PgDatabaseRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PgDatabaseDao extends DAOImpl<PgDatabaseRecord, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase, Long> {

    /**
     * Create a new PgDatabaseDao without any configuration
     */
    public PgDatabaseDao() {
        super(PgDatabase.PG_DATABASE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase.class);
    }

    /**
     * Create a new PgDatabaseDao with an attached configuration
     */
    public PgDatabaseDao(Configuration configuration) {
        super(PgDatabase.PG_DATABASE, com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase.class, configuration);
    }

    @Override
    public Long getId(com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase object) {
        return object.getOid();
    }

    /**
     * Fetch records that have <code>oid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfOid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.OID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>oid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByOid(Long... values) {
        return fetch(PgDatabase.PG_DATABASE.OID, values);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase fetchOneByOid(Long value) {
        return fetchOne(PgDatabase.PG_DATABASE.OID, value);
    }

    /**
     * Fetch a unique record that has <code>oid = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchOptionalByOid(Long value) {
        return fetchOptional(PgDatabase.PG_DATABASE.OID, value);
    }

    /**
     * Fetch records that have <code>datname BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatname(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datname IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatname(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATNAME, values);
    }

    /**
     * Fetch a unique record that has <code>datname = value</code>
     */
    public com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase fetchOneByDatname(String value) {
        return fetchOne(PgDatabase.PG_DATABASE.DATNAME, value);
    }

    /**
     * Fetch a unique record that has <code>datname = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchOptionalByDatname(String value) {
        return fetchOptional(PgDatabase.PG_DATABASE.DATNAME, value);
    }

    /**
     * Fetch records that have <code>datdba BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatdba(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATDBA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datdba IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatdba(Long... values) {
        return fetch(PgDatabase.PG_DATABASE.DATDBA, values);
    }

    /**
     * Fetch records that have <code>encoding BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfEncoding(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.ENCODING, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>encoding IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByEncoding(Integer... values) {
        return fetch(PgDatabase.PG_DATABASE.ENCODING, values);
    }

    /**
     * Fetch records that have <code>datlocprovider BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatlocprovider(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATLOCPROVIDER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datlocprovider IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatlocprovider(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATLOCPROVIDER, values);
    }

    /**
     * Fetch records that have <code>datistemplate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatistemplate(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATISTEMPLATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datistemplate IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatistemplate(Boolean... values) {
        return fetch(PgDatabase.PG_DATABASE.DATISTEMPLATE, values);
    }

    /**
     * Fetch records that have <code>datallowconn BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatallowconn(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATALLOWCONN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datallowconn IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatallowconn(Boolean... values) {
        return fetch(PgDatabase.PG_DATABASE.DATALLOWCONN, values);
    }

    /**
     * Fetch records that have <code>datconnlimit BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatconnlimit(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATCONNLIMIT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datconnlimit IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatconnlimit(Integer... values) {
        return fetch(PgDatabase.PG_DATABASE.DATCONNLIMIT, values);
    }

    /**
     * Fetch records that have <code>datfrozenxid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatfrozenxid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATFROZENXID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datfrozenxid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatfrozenxid(Long... values) {
        return fetch(PgDatabase.PG_DATABASE.DATFROZENXID, values);
    }

    /**
     * Fetch records that have <code>datminmxid BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatminmxid(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATMINMXID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datminmxid IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatminmxid(Long... values) {
        return fetch(PgDatabase.PG_DATABASE.DATMINMXID, values);
    }

    /**
     * Fetch records that have <code>dattablespace BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDattablespace(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATTABLESPACE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>dattablespace IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDattablespace(Long... values) {
        return fetch(PgDatabase.PG_DATABASE.DATTABLESPACE, values);
    }

    /**
     * Fetch records that have <code>datcollate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatcollate(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATCOLLATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datcollate IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatcollate(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATCOLLATE, values);
    }

    /**
     * Fetch records that have <code>datctype BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatctype(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATCTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datctype IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatctype(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATCTYPE, values);
    }

    /**
     * Fetch records that have <code>daticulocale BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDaticulocale(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATICULOCALE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>daticulocale IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDaticulocale(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATICULOCALE, values);
    }

    /**
     * Fetch records that have <code>datcollversion BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatcollversion(String lowerInclusive, String upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATCOLLVERSION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datcollversion IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatcollversion(String... values) {
        return fetch(PgDatabase.PG_DATABASE.DATCOLLVERSION, values);
    }

    /**
     * Fetch records that have <code>datacl BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchRangeOfDatacl(String[] lowerInclusive, String[] upperInclusive) {
        return fetchRange(PgDatabase.PG_DATABASE.DATACL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datacl IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.pg_catalog.tables.pojos.PgDatabase> fetchByDatacl(String[]... values) {
        return fetch(PgDatabase.PG_DATABASE.DATACL, values);
    }
}
