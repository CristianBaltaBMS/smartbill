/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_;


import com.baltacristiandorin.jooq.public_.tables.Fibonacci;
import com.baltacristiandorin.jooq.public_.tables.FlywaySchemaHistory;
import com.baltacristiandorin.jooq.public_.tables.Users;
import com.baltacristiandorin.jooq.public_.tables.records.FibonacciRecord;
import com.baltacristiandorin.jooq.public_.tables.records.FlywaySchemaHistoryRecord;
import com.baltacristiandorin.jooq.public_.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<FibonacciRecord> FIBONACCI_PKEY = Internal.createUniqueKey(Fibonacci.FIBONACCI, DSL.name("fibonacci_pkey"), new TableField[] { Fibonacci.FIBONACCI.FIBONACCI_ID }, true);
    public static final UniqueKey<FibonacciRecord> FIBONACCI_USER_ID_KEY = Internal.createUniqueKey(Fibonacci.FIBONACCI, DSL.name("fibonacci_user_id_key"), new TableField[] { Fibonacci.FIBONACCI.USER_ID }, true);
    public static final UniqueKey<FlywaySchemaHistoryRecord> FLYWAY_SCHEMA_HISTORY_PK = Internal.createUniqueKey(FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY, DSL.name("flyway_schema_history_pk"), new TableField[] { FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY.INSTALLED_RANK }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.USER_ID }, true);
    public static final UniqueKey<UsersRecord> USERS_USER_NAME_KEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_user_name_key"), new TableField[] { Users.USERS.USER_NAME }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<FibonacciRecord, UsersRecord> FIBONACCI__FK_FIBONACCI_USERS = Internal.createForeignKey(Fibonacci.FIBONACCI, DSL.name("fk_fibonacci_users"), new TableField[] { Fibonacci.FIBONACCI.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.USER_ID }, true);
}
