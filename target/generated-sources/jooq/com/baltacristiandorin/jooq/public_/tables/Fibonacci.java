/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_.tables;


import com.baltacristiandorin.jooq.public_.Indexes;
import com.baltacristiandorin.jooq.public_.Keys;
import com.baltacristiandorin.jooq.public_.Public;
import com.baltacristiandorin.jooq.public_.tables.records.FibonacciRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fibonacci extends TableImpl<FibonacciRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.fibonacci</code>
     */
    public static final Fibonacci FIBONACCI = new Fibonacci();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FibonacciRecord> getRecordType() {
        return FibonacciRecord.class;
    }

    /**
     * The column <code>public.fibonacci.fibonacci_id</code>.
     */
    public final TableField<FibonacciRecord, UUID> FIBONACCI_ID = createField(DSL.name("fibonacci_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.fibonacci.user_id</code>.
     */
    public final TableField<FibonacciRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.fibonacci.values</code>.
     */
    public final TableField<FibonacciRecord, String> VALUES = createField(DSL.name("values"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.fibonacci.created</code>.
     */
    public final TableField<FibonacciRecord, OffsetDateTime> CREATED = createField(DSL.name("created"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    /**
     * The column <code>public.fibonacci.updated</code>.
     */
    public final TableField<FibonacciRecord, OffsetDateTime> UPDATED = createField(DSL.name("updated"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false), this, "");

    private Fibonacci(Name alias, Table<FibonacciRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fibonacci(Name alias, Table<FibonacciRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.fibonacci</code> table reference
     */
    public Fibonacci(String alias) {
        this(DSL.name(alias), FIBONACCI);
    }

    /**
     * Create an aliased <code>public.fibonacci</code> table reference
     */
    public Fibonacci(Name alias) {
        this(alias, FIBONACCI);
    }

    /**
     * Create a <code>public.fibonacci</code> table reference
     */
    public Fibonacci() {
        this(DSL.name("fibonacci"), null);
    }

    public <O extends Record> Fibonacci(Table<O> child, ForeignKey<O, FibonacciRecord> key) {
        super(child, key, FIBONACCI);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FIBONACCI_USER_ID_IDX);
    }

    @Override
    public UniqueKey<FibonacciRecord> getPrimaryKey() {
        return Keys.FIBONACCI_PKEY;
    }

    @Override
    public List<UniqueKey<FibonacciRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.FIBONACCI_USER_ID_KEY);
    }

    @Override
    public List<ForeignKey<FibonacciRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FIBONACCI__FK_FIBONACCI_USERS);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.FIBONACCI__FK_FIBONACCI_USERS);

        return _users;
    }

    @Override
    public Fibonacci as(String alias) {
        return new Fibonacci(DSL.name(alias), this);
    }

    @Override
    public Fibonacci as(Name alias) {
        return new Fibonacci(alias, this);
    }

    @Override
    public Fibonacci as(Table<?> alias) {
        return new Fibonacci(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fibonacci rename(String name) {
        return new Fibonacci(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fibonacci rename(Name name) {
        return new Fibonacci(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fibonacci rename(Table<?> name) {
        return new Fibonacci(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super UUID, ? super String, ? super OffsetDateTime, ? super OffsetDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
