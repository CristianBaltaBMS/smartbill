/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_.tables.records;


import com.baltacristiandorin.jooq.public_.tables.Fibonacci;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FibonacciRecord extends UpdatableRecordImpl<FibonacciRecord> implements Record5<UUID, UUID, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.fibonacci.fibonacci_id</code>.
     */
    public void setFibonacciId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.fibonacci.fibonacci_id</code>.
     */
    public UUID getFibonacciId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.fibonacci.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.fibonacci.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.fibonacci.values</code>.
     */
    public void setValues(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.fibonacci.values</code>.
     */
    public String getValues() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.fibonacci.created</code>.
     */
    public void setCreated(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.fibonacci.created</code>.
     */
    public OffsetDateTime getCreated() {
        return (OffsetDateTime) get(3);
    }

    /**
     * Setter for <code>public.fibonacci.updated</code>.
     */
    public void setUpdated(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.fibonacci.updated</code>.
     */
    public OffsetDateTime getUpdated() {
        return (OffsetDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, UUID, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<UUID, UUID, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Fibonacci.FIBONACCI.FIBONACCI_ID;
    }

    @Override
    public Field<UUID> field2() {
        return Fibonacci.FIBONACCI.USER_ID;
    }

    @Override
    public Field<String> field3() {
        return Fibonacci.FIBONACCI.VALUES;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Fibonacci.FIBONACCI.CREATED;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return Fibonacci.FIBONACCI.UPDATED;
    }

    @Override
    public UUID component1() {
        return getFibonacciId();
    }

    @Override
    public UUID component2() {
        return getUserId();
    }

    @Override
    public String component3() {
        return getValues();
    }

    @Override
    public OffsetDateTime component4() {
        return getCreated();
    }

    @Override
    public OffsetDateTime component5() {
        return getUpdated();
    }

    @Override
    public UUID value1() {
        return getFibonacciId();
    }

    @Override
    public UUID value2() {
        return getUserId();
    }

    @Override
    public String value3() {
        return getValues();
    }

    @Override
    public OffsetDateTime value4() {
        return getCreated();
    }

    @Override
    public OffsetDateTime value5() {
        return getUpdated();
    }

    @Override
    public FibonacciRecord value1(UUID value) {
        setFibonacciId(value);
        return this;
    }

    @Override
    public FibonacciRecord value2(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public FibonacciRecord value3(String value) {
        setValues(value);
        return this;
    }

    @Override
    public FibonacciRecord value4(OffsetDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public FibonacciRecord value5(OffsetDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public FibonacciRecord values(UUID value1, UUID value2, String value3, OffsetDateTime value4, OffsetDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FibonacciRecord
     */
    public FibonacciRecord() {
        super(Fibonacci.FIBONACCI);
    }

    /**
     * Create a detached, initialised FibonacciRecord
     */
    public FibonacciRecord(UUID fibonacciId, UUID userId, String values, OffsetDateTime created, OffsetDateTime updated) {
        super(Fibonacci.FIBONACCI);

        setFibonacciId(fibonacciId);
        setUserId(userId);
        setValues(values);
        setCreated(created);
        setUpdated(updated);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised FibonacciRecord
     */
    public FibonacciRecord(com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci value) {
        super(Fibonacci.FIBONACCI);

        if (value != null) {
            setFibonacciId(value.getFibonacciId());
            setUserId(value.getUserId());
            setValues(value.getValues());
            setCreated(value.getCreated());
            setUpdated(value.getUpdated());
            resetChangedOnNotNull();
        }
    }
}
