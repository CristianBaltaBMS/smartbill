/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_.tables.records;


import com.baltacristiandorin.jooq.public_.tables.Users;

import java.time.OffsetDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements Record4<UUID, String, OffsetDateTime, OffsetDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.users.user_id</code>.
     */
    public void setUserId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.users.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.users.user_name</code>.
     */
    public void setUserName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.users.user_name</code>.
     */
    public String getUserName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.users.created</code>.
     */
    public void setCreated(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.users.created</code>.
     */
    public OffsetDateTime getCreated() {
        return (OffsetDateTime) get(2);
    }

    /**
     * Setter for <code>public.users.updated</code>.
     */
    public void setUpdated(OffsetDateTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.users.updated</code>.
     */
    public OffsetDateTime getUpdated() {
        return (OffsetDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<UUID, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<UUID, String, OffsetDateTime, OffsetDateTime> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Users.USERS.USER_ID;
    }

    @Override
    public Field<String> field2() {
        return Users.USERS.USER_NAME;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return Users.USERS.CREATED;
    }

    @Override
    public Field<OffsetDateTime> field4() {
        return Users.USERS.UPDATED;
    }

    @Override
    public UUID component1() {
        return getUserId();
    }

    @Override
    public String component2() {
        return getUserName();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreated();
    }

    @Override
    public OffsetDateTime component4() {
        return getUpdated();
    }

    @Override
    public UUID value1() {
        return getUserId();
    }

    @Override
    public String value2() {
        return getUserName();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreated();
    }

    @Override
    public OffsetDateTime value4() {
        return getUpdated();
    }

    @Override
    public UsersRecord value1(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public UsersRecord value2(String value) {
        setUserName(value);
        return this;
    }

    @Override
    public UsersRecord value3(OffsetDateTime value) {
        setCreated(value);
        return this;
    }

    @Override
    public UsersRecord value4(OffsetDateTime value) {
        setUpdated(value);
        return this;
    }

    @Override
    public UsersRecord values(UUID value1, String value2, OffsetDateTime value3, OffsetDateTime value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(UUID userId, String userName, OffsetDateTime created, OffsetDateTime updated) {
        super(Users.USERS);

        setUserId(userId);
        setUserName(userName);
        setCreated(created);
        setUpdated(updated);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(com.baltacristiandorin.jooq.public_.tables.pojos.Users value) {
        super(Users.USERS);

        if (value != null) {
            setUserId(value.getUserId());
            setUserName(value.getUserName());
            setCreated(value.getCreated());
            setUpdated(value.getUpdated());
            resetChangedOnNotNull();
        }
    }
}
