/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_.tables.daos;


import com.baltacristiandorin.jooq.public_.tables.Fibonacci;
import com.baltacristiandorin.jooq.public_.tables.records.FibonacciRecord;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FibonacciDao extends DAOImpl<FibonacciRecord, com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci, UUID> {

    /**
     * Create a new FibonacciDao without any configuration
     */
    public FibonacciDao() {
        super(Fibonacci.FIBONACCI, com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci.class);
    }

    /**
     * Create a new FibonacciDao with an attached configuration
     */
    public FibonacciDao(Configuration configuration) {
        super(Fibonacci.FIBONACCI, com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci.class, configuration);
    }

    @Override
    public UUID getId(com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci object) {
        return object.getFibonacciId();
    }

    /**
     * Fetch records that have <code>fibonacci_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchRangeOfFibonacciId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Fibonacci.FIBONACCI.FIBONACCI_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>fibonacci_id IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchByFibonacciId(UUID... values) {
        return fetch(Fibonacci.FIBONACCI.FIBONACCI_ID, values);
    }

    /**
     * Fetch a unique record that has <code>fibonacci_id = value</code>
     */
    public com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci fetchOneByFibonacciId(UUID value) {
        return fetchOne(Fibonacci.FIBONACCI.FIBONACCI_ID, value);
    }

    /**
     * Fetch a unique record that has <code>fibonacci_id = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchOptionalByFibonacciId(UUID value) {
        return fetchOptional(Fibonacci.FIBONACCI.FIBONACCI_ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Fibonacci.FIBONACCI.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchByUserId(UUID... values) {
        return fetch(Fibonacci.FIBONACCI.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci fetchOneByUserId(UUID value) {
        return fetchOne(Fibonacci.FIBONACCI.USER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchOptionalByUserId(UUID value) {
        return fetchOptional(Fibonacci.FIBONACCI.USER_ID, value);
    }

    /**
     * Fetch records that have <code>values BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchRangeOfValues(String lowerInclusive, String upperInclusive) {
        return fetchRange(Fibonacci.FIBONACCI.VALUES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>values IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchByValues(String... values) {
        return fetch(Fibonacci.FIBONACCI.VALUES, values);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchRangeOfCreated(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Fibonacci.FIBONACCI.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchByCreated(OffsetDateTime... values) {
        return fetch(Fibonacci.FIBONACCI.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchRangeOfUpdated(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Fibonacci.FIBONACCI.UPDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Fibonacci> fetchByUpdated(OffsetDateTime... values) {
        return fetch(Fibonacci.FIBONACCI.UPDATED, values);
    }
}
