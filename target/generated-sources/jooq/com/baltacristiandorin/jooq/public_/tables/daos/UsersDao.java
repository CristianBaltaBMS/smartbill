/*
 * This file is generated by jOOQ.
 */
package com.baltacristiandorin.jooq.public_.tables.daos;


import com.baltacristiandorin.jooq.public_.tables.Users;
import com.baltacristiandorin.jooq.public_.tables.records.UsersRecord;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, com.baltacristiandorin.jooq.public_.tables.pojos.Users, UUID> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, com.baltacristiandorin.jooq.public_.tables.pojos.Users.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, com.baltacristiandorin.jooq.public_.tables.pojos.Users.class, configuration);
    }

    @Override
    public UUID getId(com.baltacristiandorin.jooq.public_.tables.pojos.Users object) {
        return object.getUserId();
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Users.USERS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchByUserId(UUID... values) {
        return fetch(Users.USERS.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.baltacristiandorin.jooq.public_.tables.pojos.Users fetchOneByUserId(UUID value) {
        return fetchOne(Users.USERS.USER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchOptionalByUserId(UUID value) {
        return fetchOptional(Users.USERS.USER_ID, value);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchByUserName(String... values) {
        return fetch(Users.USERS.USER_NAME, values);
    }

    /**
     * Fetch a unique record that has <code>user_name = value</code>
     */
    public com.baltacristiandorin.jooq.public_.tables.pojos.Users fetchOneByUserName(String value) {
        return fetchOne(Users.USERS.USER_NAME, value);
    }

    /**
     * Fetch a unique record that has <code>user_name = value</code>
     */
    public Optional<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchOptionalByUserName(String value) {
        return fetchOptional(Users.USERS.USER_NAME, value);
    }

    /**
     * Fetch records that have <code>created BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchRangeOfCreated(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Users.USERS.CREATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchByCreated(OffsetDateTime... values) {
        return fetch(Users.USERS.CREATED, values);
    }

    /**
     * Fetch records that have <code>updated BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchRangeOfUpdated(OffsetDateTime lowerInclusive, OffsetDateTime upperInclusive) {
        return fetchRange(Users.USERS.UPDATED, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated IN (values)</code>
     */
    public List<com.baltacristiandorin.jooq.public_.tables.pojos.Users> fetchByUpdated(OffsetDateTime... values) {
        return fetch(Users.USERS.UPDATED, values);
    }
}
